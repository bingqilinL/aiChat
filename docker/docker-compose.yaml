services:
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.18  # 使用特定的etcd版本，确保兼容性
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision  # 自动压缩模式，定期清理历史数据
      - ETCD_AUTO_COMPACTION_RETENTION=1000  # 保留1000个修订版本
      - ETCD_QUOTA_BACKEND_BYTES=4294967296  # 后端存储配额4GB
      - ETCD_SNAPSHOT_COUNT=50000            # 快照计数
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd  # 数据持久化到本地etcd目录
    command: etcd -advertise-client-urls=http://0.0.0.0:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z  # 使用特定版本的MinIO
    environment:
      MINIO_ACCESS_KEY: minioadmin  # 默认访问密钥，生产环境应更改
      MINIO_SECRET_KEY: minioadmin  # 默认秘密密钥，生产环境应更改
    ports:
      - "9001:9001"  # MinIO控制台端口
      - "9000:9000"  # MinIO API端口
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data  # MinIO数据持久化
    command: minio server /minio_data --console-address ":9001"  # 启动命令，指定控制台端口
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.5.13  # Milvus独立模式镜像版本
    command: ["milvus", "run", "standalone"]  # 启动Milvus独立模式
    security_opt:
      - seccomp:unconfined
    environment:
      MINIO_REGION: us-east-1        # MinIO区域
      ETCD_ENDPOINTS: etcd:2379      # etcd服务地址
      MINIO_ADDRESS: minio:9000      # MinIO服务地址
      MINIO_ACCESS_KEY: minioadmin   # 与MinIO服务一致的访问密钥
      MINIO_SECRET_KEY: minioadmin   # 与MinIO服务一致的秘密密钥
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus  # Milvus数据持久化
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]  # 健康检查
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"  # Milvus的gRPC端口，客户端连接使用
      - "9091:9091"    # Milvus的HTTP端口，用于健康检查等
    depends_on:        # 定义启动依赖关系
      - "etcd"
      - "minio"

  attu:
    container_name: milvus-attu
    image: zilliz/attu:v2.3.9  # 建议使用与Milvus版本兼容的Attu版本
    environment:
      MILVUS_URL: milvus-standalone:19530  # 指向Milvus服务的地址
    ports:
      - "8000:3000"  # 将Attu的Web界面映射到主机的8000端口
    depends_on:
      - "standalone"  # 依赖于Milvus standalone服务
    networks:
      - default  # 确保与Milvus在同一个网络中

  # 新增Redis服务配置
  redis:
    container_name: redis-server
    image: redis:7.2-alpine  # 轻量级Redis镜像，版本稳定
    #restart: always  # 容器意外退出时自动重启
    ports:
      - "6379:6379"  # Redis默认端口映射
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}  # Redis访问密码（建议修改）
    volumes:
      # 数据持久化到当前目录的redis-data文件夹（与现有volumes目录结构保持一致）
      - ${DOCKER_VOLUME_DIRECTORY:-.}/redis-data:/data
      # 挂载自定义配置文件（若当前目录存在redis.conf则会生效）
      - ${DOCKER_VOLUME_DIRECTORY:-.}/redis.conf:/usr/local/etc/redis/redis.conf
    command: >
      redis-server 
      /usr/local/etc/redis/redis.conf
    networks:
      - default  # 加入现有milvus网络，可与其他服务互通
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]  # 健康检查命令
      interval: 10s
      timeout: 5s
      retries: 3
  # 新增Redis Insight图形界面服务
  redis-insight:
    container_name: redis-insight
    image: redislabs/redisinsight:1.14.0  # 官方镜像
    #restart: always
    ports:
      - "8001:8001"  # 图形界面访问端口
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/redis-insight-data:/data  # 持久化Insight数据
    depends_on:
      - redis  # 确保Redis启动后再启动Insight
    networks:
      - default  # 与Redis在同一网络，可直接通过容器名访问
networks:
  default:
    name: milvus  # 所有服务共享此网络，便于内部通信
