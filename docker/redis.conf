# ==========================================
# 1. 基础网络配置（适配Docker容器环境）
# ==========================================
# 允许所有网络访问（Docker内通过网络隔离保障安全，无需限制单IP）
bind 0.0.0.0
# 端口（与Docker映射一致，默认6379）
port 6379
# 保护模式（配合密码使用，防止未授权访问）
protected-mode no
# 启用ACL（访问控制列表），Redis 6.0+支持
# 配置默认用户（default）：启用登录，设置密码，允许所有命令和键
# user default on >${REDIS_PASSWORD} ~* +@all
# 可选：创建额外用户（例如只读用户）
# user reader on >reader_password ~* +@read -@write
# TCP连接超时时间（秒，0表示不超时）
timeout 300
# TCP保活机制（秒，定期检测连接有效性）
tcp-keepalive 300


# ==========================================
# 2. 安全配置（与Docker环境变量联动）
# ==========================================
# 访问密码（⚠️ 若Docker Compose中通过--requirepass设置了密码，会覆盖此配置）
# 建议统一在Docker环境变量REDIS_PASSWORD中管理，此处留空或与环境变量保持一致
# requirepass ${REDIS_PASSWORD}
# 禁用危险命令（生产环境可选，如FLUSHALL/FLUSHDB，避免误操作）
rename-command FLUSHALL ""
rename-command FLUSHDB ""
rename-command CONFIG ""


# ==========================================
# 3. 持久化配置（与Docker Compose命令互补）
# ==========================================
# AOF持久化（Docker中已通过--appendonly yes开启，此处显式配置强化）
appendonly yes
# AOF文件名（存储在/data目录，对应Docker挂载的redis-data）
appendfilename "appendonly.aof"
# AOF刷盘策略（everysec：每秒刷盘，兼顾性能与数据安全）
appendfsync everysec
# AOF重写触发条件（文件增长100%且大于64MB时重写，避免文件过大）
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
# AOF文件损坏时的恢复策略（yes：忽略错误继续启动，no：停止启动等待修复）
aof-load-truncated yes

# RDB持久化（Docker中已通过--save设置策略，此处补充细节）
# 触发快照的条件（与Docker命令一致，避免冲突）
save 900 1
save 300 10
save 60 10000
# RDB文件名（存储在/data目录）
dbfilename dump.rdb
# 快照生成期间是否停止写操作（no：允许写，通过临时文件保证一致性）
stop-writes-on-bgsave-error yes
# RDB文件压缩（yes：压缩节省空间，轻微损耗CPU）
rdbcompression yes
# RDB文件校验（yes：校验完整性，避免损坏）
rdbchecksum yes


# ==========================================
# 4. 内存管理（避免占用过多资源影响Milvus）
# ==========================================
# 最大使用内存（根据宿主机配置调整，如4GB，单位：bytes）
maxmemory 4294967296
# 内存满时的淘汰策略（volatile-lru：优先淘汰带过期时间的LRU键）
# 若Redis主要存储无过期时间的数据，可改为allkeys-lru
maxmemory-policy volatile-lru
# 淘汰键时是否返回错误（no：直接淘汰旧键，继续服务）
maxmemory-samples 5


# ==========================================
# 5. 连接与性能优化
# ==========================================
# 最大客户端连接数（根据业务需求调整，默认10000）
maxclients 10000
# 数据库数量（默认16个，可按需减少）
databases 16
# 键的过期检查频率（hz值越高，过期键清理越及时，CPU占用略高）
hz 10
# 禁用IPv6（Docker环境中多为IPv4，避免解析问题）
#ipv6 yes


# ==========================================
# 6. 日志配置（便于问题排查）
# ==========================================
# 日志级别（notice：默认级别，记录关键信息，不冗余）
loglevel notice
# 日志文件（存储在/data目录，对应Docker挂载的redis-data）
logfile "/data/redis.log"
# 日志是否追加模式（yes：不覆盖历史日志）
appendonly yes


# ==========================================
# 7. 其他实用配置
# ==========================================
# 开启慢查询日志（记录超过1000微秒的命令）
slowlog-log-slower-than 1000
# 慢查询日志最大条数（1000条，满了自动覆盖旧日志）
slowlog-max-len 1000
# 开启哈希表优化（小哈希表采用紧凑存储，节省内存）
hash-max-ziplist-entries 512
hash-max-ziplist-value 64
# 开启列表压缩（短列表采用紧凑存储）
list-max-ziplist-size -2
list-compress-depth 0